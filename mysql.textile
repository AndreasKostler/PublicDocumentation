"home":../../index.html > "training":../index.html > MySQL

p(toc). Table of Contents

{toc}

h1. Basic Commands

h2. Start server

on mac:

@sudo mysqld_safe@

on ubuntu:

bc. 
sudo /etc/init.d/mysql start

Thow into background after you start, then you can kill the terminal window you started it in.

h2. Set root password

h3. first time

@mysqladmin -u root password supersecretpasswd@

h3. reset root password

@$ mysqladmin -u root -p'supersecretpasswd' password newsupersecretpasswd@

h2. Login

@mysql -u root -p@ or if no password is defined for the root user, just: @mysql -u root@ will work.

h2. Show databases and tables

Show all databases, use a database, see which tables are defined in that DB, then quit.

bc. 
mysql> show databases;
mysql> use test;
mysql> show tables;

h3. Dump Database

bc. 
mysqldump -h localhost DATABASE > DATABASE.sql

h3. Create Table

bc. 
mysql> CREATE TABLE example ( id INT, data VARCHAR(100));


h3. Drop Table

bc. 
mysql> DROP TABLE example;

h3. See the columns in a table

bc. 
describe DocMeta;

h3. Add column to table

bc. 
ALTER TABLE contacts ADD email VARCHAR(60);

h1. Common Use Cases

h2. Create new db and give user rights to it

* In the following example we log in as root.  

bc. 
$ mysql -u root -p

* Create a db called: @amarokdb@. 

bc. 
mysql> create database amarokdb;

* We allow user amarokuser to connect to the server from localhost using the password amarokpasswd:

* Side note you may want to give an existing user access versus creating the user.  To see a list of users do:

bc. 
mysql> select host, user from mysql.user;


Otherwise create a new user.

bc. 
mysql> grant usage on *.* to amarokuser@localhost identified by 'amarokpasswd';

* And finally we grant all privileges on the amarok database (* means all tables) to this user:

bc. 
mysql> grant all privileges on amarokdb.* to amarokuser@localhost ;

* And that's it. You can now check that you can connect to the MySQL server using this command:

bc. 
$ mysql -u amarokuser -p'amarokpasswd' amarokdb

* Drop a user:

bc. 
drop user 'amarokuser'@'localhost';


h2. Who has access to what

The following command will show which users have access to which databases:

bc. 
mysql> select user, host, db from mysql.db;

h1. Maven

bc. 
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>5.1.9</version>
</dependency>

