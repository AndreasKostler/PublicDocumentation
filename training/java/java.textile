"home":../../index.html > "training":../index.html > Java

p(toc). Table of Contents

{toc}

h1. Installation Considerations

!/images/mac.jpeg!

Mac JVMs are installed to here: @/System/Library/Frameworks/JavaVM.framework/Versions@

h1. Application Configuration

h2. Resource Files

These are okay if you want hard package a properties file with your jar.  However, if you want the end user to configure your application then you should use a properties file like the next section recommends.

bc. 
ResourceBundle props = ResourceBundle.getBundle ("some.pkg.resource");
String host = props.getString("host");
System.out.println("This is the host: " + host);

in this case you'd have a file called @resource.properties@ located in the @some.pkg@ package.

In the above scenario this would be located at: @some/pkg/resource.properties@.  Then you'd jar up your sources, including the resource.properties file and your code would still work when deployed in different scenarios...however it is very difficult for the end user to modify...since they don't have a simple text file separate from your jar in which to place settings.  In that scenario use a property file as described next.

h2. Properties File

bc. 
Properties properties = new Properties();
String filename = "application.properties";
File file = new File(filename);
properties.load(new FileInputStream(file));

h2. The Best Way

The following loads a properties file (not resource file) from the root of the classpath....without it needing to be compiled into the jar.

Sometimes you want to find out what file it did find...you can use:


h1. Loops

h2. foreach

h3. List

bc. 
List listToLoopOver = new ArrayList<String>();
listToLoopOver.add("a"); listToLoopOver.add("b");
for (String currString : listToLoopOver)
    System.out.println(currString);  

h3. Map

bc. 
Map<String,String> contactList = new HashMap<String,String>();
contactList.put("Fenton", "fenton@gmail.com"); contactList.put("joe", "joe@gmail.com"); 
for(Map.Entry<K, V> e : map.entrySet())
    System.out.println(e.getKey()+": "+e.getValue());
    
h2. Control

h3. switch

bc. 
int month = 8;
switch (month) {
    case 1:  System.out.println("January"); break;
    case 2:  System.out.println("February"); break;
    case 3:  System.out.println("March"); break;
    case 4:  System.out.println("April"); break;
    case 5:  System.out.println("May"); break;
    case 6:  System.out.println("June"); break;
    case 7:  System.out.println("July"); break;
    case 8:  System.out.println("August"); break;
    case 9:  System.out.println("September"); break;
    case 10: System.out.println("October"); break;
    case 11: System.out.println("November"); break;
    case 12: System.out.println("December"); break;
    default: System.out.println("Invalid month.");break;
}

h1. Misc

h2. Class Loaders

bc. 
		URL[] urls = ((URLClassLoader) ClassLoader.getSystemClassLoader()).getURLs();
		System.out.println(urls);

h2. Dates

"Date Reference":http://download.oracle.com/javase/1.4.2/docs/api/java/text/SimpleDateFormat.html

Convert String -> Date

bc. 
String startDate = "2004-03-19";
DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
Date date = df.parse(startDate);

Convert Date -> String

bc. 
Date todaysDate = new java.util.Date();
SimpleDateFormat formatter = new SimpleDateFormat("EEE MMM dd HH:mm:ss");
String formattedDate = formatter.format(todaysDate);

h2. Regex

bc. 
String pattern = "(^.+)(\\.[\\w]+$)";
Pattern r = Pattern.compile(pattern);
Matcher m = r.matcher(fullName);
if (m.find()) {
	String pkgName = m.group(1);
	return pkgName;
}

h1. XML & Java

Recommend using StAX (Streaming API for XML)

* reference: http://www.vogella.de/articles/JavaXML/article.html

Sample XML

bc. 
<?xml version="1.0" encoding="UTF-8"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <SOAP-ENV:Body>
    <ns:PicklistWS_GetPicklistValues_Output xmlns:ns="urn:crmondemand/ws/picklist/">
      <ListOfParentPicklistValue xmlns="urn:/crmondemand/xml/picklist">
        <ParentPicklistValue>
          <Language>ENU</Language>
          <ParentFieldName/>
          <ParentDisplayValue/>
          <ParentCode/>
          <Disabled/>
          <ListOfPicklistValue>
            <PicklistValue>
              <Code>F</Code>
              <DisplayValue>F</DisplayValue>
              <Disabled>N</Disabled>
            </PicklistValue>
            <PicklistValue>
              <Code>M</Code>
              <DisplayValue>M</DisplayValue>
              <Disabled>N</Disabled>
            </PicklistValue>
          </ListOfPicklistValue>
        </ParentPicklistValue>
      </ListOfParentPicklistValue>
    </ns:PicklistWS_GetPicklistValues_Output>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>

Parsing Code:

bc. 
	static Map<String, String> getPicklistFromSoapResponse(String soapResponse) throws ServiceException {
		Map<String, String> values = new LinkedHashMap<String, String>();
		XMLInputFactory inputFactory = XMLInputFactory.newInstance();
		String code = null;
		String display = null;
		String disabled = null;
		try {
			InputStream in = new ByteArrayInputStream(soapResponse.getBytes("UTF-8"));
			XMLEventReader eventReader = inputFactory.createXMLEventReader(in);
			while (eventReader.hasNext()) {
				XMLEvent event = eventReader.nextEvent();
				if (event.isStartElement()) {
					if (event.asStartElement().getName().getLocalPart().equals("Code")) {
						event = eventReader.nextEvent();
						code = event.asCharacters().getData();
						continue;
					}
					if (event.asStartElement().getName().getLocalPart().equals("DisplayValue")) {
						event = eventReader.nextEvent();
						display = event.asCharacters().getData();
						continue;
					}
					if (event.asStartElement().getName().getLocalPart().equals("Disabled")) {
						event = eventReader.nextEvent();
						disabled = event.asCharacters().getData();
						if ( "Y".equals(disabled)) values.put(code, display);
						continue;
					}
				}
			}
		} catch (UnsupportedEncodingException e) {
			throw new ServiceException(e);
		} catch (XMLStreamException e) {
			throw new ServiceException(e);
		}
		return values;
	}
	
The line: 

bc. InputStream in = new ByteArrayInputStream(soapResponse.getBytes("UTF-8"));

can be switch for a file as the source of the xml with:

bc. InputStream in = new FileInputStream("myFile.xml");

While looping through the events, the first thing we need to do is get the XMLEvent with @eventReader.nextEvent()@.  Normally we only care for events that are start elements, which is retrieved with the line:

bc. event.isStartElement()

This checks to see if what we are looking at is an opening tag.  For example in: @<name>Fenton</name>@ only the @<name>@ part is the start element.  So taking that snippet of xml, calling the following

bc. event.asStartElement().getName().getLocalPart()

results in the string: @name@.  To get the string @Fenton@ we call: @event.asCharacters().getData()@

Now sometimes an element will have attributes like: @<name type="User">Fenton</name>@.  In this case the part @type="User"@ is an attribute and it can be extracted with:

bc. 
StartElement startElement = event.asStartElement();
Iterator<Attribute> attributes = startElement.getAttributes();
while (attributes.hasNext()) {
	Attribute attribute = attributes.next();
	if (attribute.getName().toString().equals("type"));
	String typeIsUser = attribute.getValue();
}
