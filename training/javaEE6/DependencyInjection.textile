"home":../../index.html > "training":../index.html > "Java EE 6":index.html > Dependency Injection

p(toc). Table of Contents

{toc}

h1. Spring Dependency Injection - Overview

We are trying to create a scenario where we can write code that does
depend on outside services, but that we can test without having to
have those outside services available.

Create the following files:

!spring_di_folder_layout.png!

h2. The Production Code

src/main/java/main/Main.java

bc. 
package main;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import user.ClassWithExternalDependency;
public class Main {
	public static void main(String[] args) {
		ApplicationContext context = new ClassPathXmlApplicationContext(
				"main/application-context.xml");
		BeanFactory factory = context;
		ClassWithExternalDependency cwed = (ClassWithExternalDependency) factory
				.getBean("classWithExternalDependency");
		cwed.run();
	}
}

src/main/java/main/application-context.xml

bc. 
 <beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd">
   <context:component-scan base-package="user" />
   <context:component-scan base-package="services" />
 </beans>

src/main/java/services/IService.java

bc. 
package services;
public interface IService {
	public String service1(String filename);
}

src/main/java/services/ProductionService.java

bc. 
package services;
import org.springframework.stereotype.Service;
@Service
public class ProductionService implements IService {
	public String service1(String filename) {
		return "Real Service";
	}
}

src/main/java/user/ClassWithExternalDependency.java

bc. 
package user;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import services.IService;
@Service
public class ClassWithExternalDependency {
	@Autowired
	private IService service;
	public void run() {
		System.out.println(service.service1("inputArgs"));		
	}
}

h2. The Tests

src/test/java/testServices

bc. 
package testServices;
import org.springframework.stereotype.Service;
import services.IService;
@Service
public class UnitTestService implements IService {
	public String service1(String filename) {
		return "Fake Service.";
	}
}

src/test/java/user/ClassWithExternalDependencyTest.java

bc. 
package user;
import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
public class ClassWithExternalDependencyTest {
	private ClassWithExternalDependency cwed;
	@Before
	public void setup() {
		ApplicationContext context = new ClassPathXmlApplicationContext(
				"user/test-application-context.xml");
		BeanFactory factory = context;
		cwed = (ClassWithExternalDependency) factory.getBean("classWithExternalDependency");
	}
	@Test
	public void testRun() {
		cwed.run();
	}
}

src/test/java/user/test-application-context.xml

bc. 
 <beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd">
   <context:component-scan base-package="user" />
   <context:component-scan base-package="testServices" />
 </beans>

That should do it

h1. Spring Web App

You'll need to configure your web.xml to pickup your
applicationContext.xml file


h2. Extra Notes

tips on loading the applicationContext.xml file from web.xml

http://www.gridshore.nl/2008/05/13/spring-application-context-loading-tricks/

