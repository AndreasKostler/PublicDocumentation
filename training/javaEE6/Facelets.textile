"home":../../index.html > "Training":../index.html > "Java EE 6":index.html > Facelets

p(toc). Table of Contents

{toc}

h1. Intro

This tutorial is designed to show you how to move from traditional HTML web page creation to creating web pages with JSF(Java Server Faces).  Facelets are the way to do UI in JSF.  Lets look at the difference between an HTML file and a JSF Facelets file.


<filelocation>src/main/webapp/home.html

bc. 
<html 
  xmlns="http://www.w3.org/1999/xhtml">
  <body>
    This is a standard HTML page.
  </body>
</html>

<filelocation>src/main/webapp/home.xhtml

bc. 
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:ui="http://java.sun.com/jsf/facelets">
  <body>
    This is a facelets file.
  </body>
</html>

!images/fl_html_to_facelets.png!

As you can see they are quite similar.  Two differences is the file extention we change from @.html@ to @.xhtml@ and we add @xmlns:ui="http://java.sun.com/jsf/facelets"@ into the @<html>@ tag.

h1. Including Files

Now lets get on to something a little more interesting and useful.  Now we will learn how to include the contents of one file into another file.  Typically on a website you will have many pages.  However, on each page you may have the same contents on the top and the bottom, but just change what occurs in the middle of the page.  The classic example of this is having a repeated footer or header on all pages of your website.  If you want to change your logo, you can simply change it in one file and everywhere you have included this 'header' file, it will be automatically updated.  If you didn't use this technique then updating your logo would mean going to each page of your website and updating the logo.  As you can see this would be quite tedious.

h2.  Example

Lets get started with an example, create three files, a _home_ page, an _about_ page and a _navigation_ file.  We will include the _navigation_ file in both the _home_ and _about us_ pages.  Then you will see how just changing the _navigation_ file causes the other two to be updated as you would expect them to be.  The benefits of this multiply the more files you have.

!images/fl_include.png!

First create the file that will be referenced (included) by other files

<filelocation> src/main/webapp/navigation.xhtml

bc. 
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:ui="http://java.sun.com/jsf/facelets">
    <ui:composition>
    	<a href="home.jsf">Home</a><br/>
    	<a href="about.jsf">About</a><br/>
    	<hr/>
    </ui:composition>
</html>

!images/fl_includes.png!

Update your home.xhtml to reference the _include_ file.

<filelocation> src/main/webapp/home.xhtml

bc. 
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:ui="http://java.sun.com/jsf/facelets">
  <body>
    <ui:include src="navigation.xhtml"/>
    HOME PAGE...
  </body>
</html>

!images/fl_includes2.png!

h2. Test with...

* First visit the following URL's: @http://localhost:8080/projectName/home.jsf@

(NOTE) your web application will probably NOT be called @projectName@, so remember to change the above URL's replacing @projectName@ with the actual name of your project/web application.

Notice how the navigation is included in the @home.xhtml@ file.

* Now go back to the navigation file and make the following changes:

<filelocation> src/main/webapp/navigation.xhtml

bc. 
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:ui="http://java.sun.com/jsf/facelets">
    <ui:composition>
    	<a href="home.jsf">Home</a><&nbsp><a href="about.jsf">About</a><br/>
    	<hr>
    </ui:composition>
</html>

We simply moved the navigation links to be beside each other as opposed to one on top of the other. Now revist the @home@ page to see that it has changed.

h2. Take Away

* Create a snippet page/file that will be _used_ by other pages/files.  In this snippet page use @<ui:composition>@ tags around the content that will be included (used) by other pages.

* put @<ui:include src="filenameToInclude.xhtml"/>@ in the page that wants to include the snippet.

h1. Templating

A template page lays out the location of page elements.  For example, a section named header will appear at the top of the page, and a section called footer will appear at the bottom and a body section will lie between these two elements.  This template is then used by other pages.

h2. First Template

Create a layout template:

<filelocation>src/main/webapp/layout.xhtml

bc. 
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:ui="http://java.sun.com/jsf/facelets">
    <body>
    <ui:include src="navigation.xhtml"/>
    <ui:insert name="body"/>
</body>
</html>

!images/fl_temp_1.png!

Update your home.xhtml & about.xhtml to make use of the layout template:

<filelocation>src/main/webapp/home.xhtml

bc. 
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:ui="http://java.sun.com/jsf/facelets">
    <ui:composition template="layout.xhtml">
        <ui:define name="body">
            HOME PAGE...
        </ui:define>
    </ui:composition>
</html>

!images/fl_temp_2.png!

<filelocation>src/main/webapp/about.xhtml

bc. 
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:ui="http://java.sun.com/jsf/facelets">
    <ui:composition template="layout.xhtml">
        <ui:define name="body">
            ABOUT PAGE...
        </ui:define>
    </ui:composition>
</html>


h3. Take Away

* In your template you define the regions you want to be replaced with  

@<ui:insert name="someName"/>@ 

sections, replacing _someName_ with an appropriate name like _body_ or _associatedLinks_.

* In the files that will make use of the template, specify the template location:

@<ui:composition template="layout.xhtml">@ 

* For each @ui:insert@ tag in the template, create a corresponding @ui:define@ in the page that uses the template 

@<ui:define name="someName"> Some HTML code </ui:define>@

replacing _someName_ with the section name we want to replace.

h3. Test It

* Go to page: @http://localhost:8080/projectName/home.jsf@ and @http://localhost:8080/projectName/about.jsf@

h3. Benefits

Now think about if you wanted to move your navigation from the top, to the left hand side.  We can simply update the @layout.xhtml@ page and the rest of the pages follow suit.  So change your @layout.xhtml@ as follows and retest the above two links:

<filelocation>src/main/webapp/layout.xhtml

bc. 
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:ui="http://java.sun.com/jsf/facelets">
  <body>
  	<table border="1">
  		<tr>
  			<td><ui:include src="navigation.xhtml"/></td>
  			<td><ui:insert name="body"/></td>
  		</tr>
  	</table>
  </body>
</html>

lets also remove the @<hr/>@ horizontal ruler from @navigation.xhtml@ as well.

<filelocation>src/main/webapp/navigation.xhtml

bc. 
<html
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:ui="http://java.sun.com/jsf/facelets">
    <ui:composition>
    	<a href="home.jsf">Home</a><br/>
    	<a href="about.jsf">About Us</a><br/>
    </ui:composition>
</html>

h1. Create your own tags: Composite Components

In JSF 2.0 you can create your own tags.  Here is a simple example.

<filelocation> project/src/main/webapp/resources/myComponents/greeting.xhtml

bc. 
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:composite="http://java.sun.com/jsf/composite">
    <composite:interface>
        <composite:attribute name="yourName"/>
    </composite:interface>
    <composite:implementation>
        Hello #{cc.attrs.yourName}, nice to meet you.
    </composite:implementation>
</html>

!images/fl_composite_components.png!

Now you can use this component, update your home.xhtml page:

<filelocation> project/src/main/webapp/webapp/home.xhtml

bc. 
<html 
	xmlns="http://www.w3.org/1999/xhtml" 
	xmlns:ui="http://java.sun.com/jsf/facelets" 
	xmlns:ft="http://java.sun.com/jsf/composite/myComponents" >
	<ft:greeting yourName="fenton"/>
</html>

!images/fl_composite_components_2.png!

h2. Take Aways

* Create a folder named @resources@ in your web app root folder
* Any directory structure you have under that will need to be reflected in your @xmlns@ declaration.

!images/fl_cc_lib_path.png!

* When using your tag, its name is the same as the filename you gave your custom component.

!images/fl_cc_tag_name.png!

h2. default attributes

Lets make the tag take an optional attribute to specify the style of the tag, that if not specified, defaults to @greetClass@.

<filelocation> project/src/main/webapp/resources/myComponents/greeting.xhtml

bc. 
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:composite="http://java.sun.com/jsf/composite">
    <composite:interface>
        <composite:attribute name="yourName"/>
        <composite:attribute name="styleClass" default="greetClass" required="false"/>
    </composite:interface>
    <composite:implementation>
		<div class="#{cc.attrs.styleClass}">Hello #{cc.attrs.yourName}, nice to meet you.</div>
    </composite:implementation>
</html>

h1. Summary

Between the three techniques shown above, _Includes_, _Templates_, and _Composite Components_, you have covered the basics of JSF 2.0 facelets. 

h1. References

h2. JSF Tag Library Reference

* "JSF Tag Library Reference":http://www.horstmann.com/corejsf/jsf-tags.html

h1. Glossary

{glossary}