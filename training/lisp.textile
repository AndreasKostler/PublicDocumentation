"home":/index.html > SLIME

p(toc). Table of Contents

{toc}

h1. Getting Started

In emacs execute:

bc. Alt-x slime

h1. Commands

h2. Printing

bc. (format t "hello, world")

Format directives start with ~ (much the way printf’s directives start
with %).

The ~t directive is for tabulating. The ~10t tells FORMAT to emit enough spaces to move to
the tenth column before processing the next ~a. A ~t doesn’t consume any arguments.

CL-USER>  (format t "~a:~10t~a" :artist "Dixie Chicks")
ARTIST:   Dixie Chicks
NIL

Now things get slightly more complicated. When FORMAT sees ~{ the next argument to be
consumed must be a list. FORMAT loops over that list, processing the directives between the ~{
and ~}, consuming as many elements of the list as needed each time through the list. 



* Define a new function

bc. (defun <function_name> <paren_list> <function>)

* Define a variable (with DEFVAR macro)

bc. (defvar *data* nil)

* DOLIST macro.  This function works by looping over all the elements of *db* with the DOLIST macro,
binding each element to the variable cd in turn. For each value of cd, you use the FORMAT
function to print it.

bc. 
(defun dump-db ()
 (dolist (cd *db*)
  (format t "~{~a:~10t~a~%~}~%" cd)))


* Loading a file full of lisp

bc. (load "myFunctions.lisp")

* Load defun into lisp (do anywhere in or immediately after defun)

bc. C-c C-c

* Switch to the REPL

bc. C-c C-z

* Quit

bc. , quit

* Exit the debugger

bc. q

* Compile a file, creates "hello.fasl" (FASt Load)

bc. (compile-file "hello.lisp")

* Compile and load the file in the current buffer

bc. C-c C-k

* Make a list function, constructs a list from its arguments

bc. (list 1 2 3)
(1 2 3)

* A plist or property list (like a hash map) contains key=>value pairs. A plist is a list where every other element, starting with the first, is a symbol that describes what the next element in the list is. A keyword is any name that starts with a colon (:), for instance, :foo. 

bc. (list :a 1 :b 2 :c 3)

* The function GETF, which takes a plist and a symbol and returns the value in the plist following the symbol

bc. (GETF (list :a 1 :b 2 :c 3) :a)
(1)
