"home":/index.html > GIT

p(toc). Table of Contents

{toc}

h1. References

* "Git Reference":http://git.or.cz/course/svn.html

h1. Basics

Go to the dir you want to be managed by git and do:

bc. 
git init
git add .
git commit

h1. Setup 

Reference: "Dreamhost Gitosis Setup":http://wiki.dreamhost.com/Gitosis

bc. 
[ftravers@local]$ ssh-keygen -t rsa
[ftravers@local]$ ssh-copy-id ft_git3@spicevan.com
[ftravers@local]$ rsync -avP --stats .ssh/id_rsa.pub ft_git3@spicevan.com:~

Check your version of python with: @python --version@

for 2.5*

bc. 
[remote]$ mkdir -p $HOME/lib/python2.5/site-packages
[remote]$ export PYTHONPATH=$HOME/lib/python2.5/site-packages
[remote]$ mkdir ~/src; cd ~/src; wget http://pypi.python.org/packages/2.5/s/setuptools/setuptools-0.6c11-py2.5.egg
[remote]$ sh setuptools-0.6c11-py2.5.egg --prefix=$HOME

for 2.6*

bc. 
[remote]$ mkdir -p $HOME/lib/python2.6/site-packages
[remote]$ export PYTHONPATH=$HOME/lib/python2.6/site-packages
[remote]$ mkdir ~/src; cd ~/src; wget http://pypi.python.org/packages/2.6/s/setuptools/setuptools-0.6c11-py2.6.egg
[remote]$ sh setuptools-0.6c11-py2.6.egg --prefix=$HOME

The rest is the same for either version.  

bc. 
[remote]$ git clone git://eagain.net/gitosis.git

If the @git clone git://eagain.net/gitosis.git@ line doesn't work for you
like it didn't for me once, you can download the tar.gz off the web and 
untar it in your root folder so @cd; ls@ shows the @gitosis@ directory.

bc. 
[remote]$ cd; tar xvfz gitosis-somelongHashCode.tar.gz

The rest should go without a hitch

bc. 
[remote]$ cd gitosis/
[remote]$ export PATH=$HOME/bin:$PATH
[remote]$ python setup.py install --prefix=$HOME; cd
[remote]$ echo "export PYTHONPATH=$HOME/lib/python2.5/site-packages/" >> .bashrc
[remote]$ echo "export PYTHONPATH=$HOME/lib/python2.5/site-packages/" >> .bash_profile
[remote]$ echo "export PATH=$HOME/bin:$PATH" >> .bashrc
[remote]$ echo "export PATH=$HOME/bin:$PATH" >> .bash_profile
[remote]$ . ~/.bash_profile
[remote]$ gitosis-init < id_rsa.pub; rm -f id_rsa.pub
[remote]$ chmod 750 $HOME/repositories/gitosis-admin.git/hooks/post-update
[ftravers@local]$ mkdir ~/projects; cd ~/projects
[ftravers@local]$ git clone ft_git3@spicevan.com:gitosis-admin.git

h1. Adding a new Repository

h2. Edit config file

Edit config file: @gitosis-admin/gitosis.conf@

The following is the template for understanding the format of this file:

bc. 
[group groupName]
writable = repoName
members = user1 user2

The fields above that need to be filled in with your specific information are:
* @groupName@ : This is the name of your project group
* @repoName@ : This is the name of the folder that holds your repository/project
* @user1@, @user2@ : This is the name of the user who will belong to this group.  This must correspond to the filename located in @gitosis-admin/keydir/user1.pub@.  Note don't include the @.pub@ extension.

Example: 

bc. 
[ftravers@local]$ cat ~/projects/gitosis-admin/gitosis.conf
[gitosis]
[group gitosis-admin]
writable = gitosis-admin
members = ftravers@ftravers-laptop
[group testgroup1]
members = ftravers@ftravers-laptop @anothergroup
writable = testrepo1 testrepo2 
readonly = testrepo3
## You can use groups just to avoid listing users multiple times. Note
## no writable= or readonly= lines.
[group anothergroup]
members = alice bill

where
* @writable@ : defines who has commit privileges
* @readonly@ : defines who has read only privileges
* @testgroup1@ : is the name of the group
* @testrepo1@ : is the name of the new repository
* @members@ : is a space delimeted list of users included in this group

The @members@ list should be the filenames from @~/projects/gitosis-admin/keydir@ folder without the @.pub@ extension.

h2. Push to server

Push this up to the server:

bc. 
[ftravers@local]$ git commit -a -m"My comment."; git push

h2. Create/Copy local folder/files

Now create the project...

bc. 
[ftravers@local]$ cd ~/projects; 

You can create a new empty directory, or copy an existing directory/files into this folder

* Without Maven

bc. 
[ftravers@local]$ rm -rf testrepo1; mkdir testrepo1

* - OR - with Maven

bc. 
[ftravers@local]$ mvn archetype:create -DgroupId=com.mycompany.app -DartifactId=testrepo1

* Add it to git server

bc. 
[ftravers@local]$ cd testrepo1; git init
[ftravers@local]$ git remote add origin ft_git3@spicevan.com:testrepo1.git

Do some work, git add and commit files like: @test.txt@

If you copy some files into here that you want to then manage, after the copy do the following:

bc. 
[ftravers@local]$ cd testrepo1
[ftravers@local]$ git add .
[ftravers@local]$ git commit -m"Initial Commit"
[ftravers@local]$ git push origin master:refs/heads/master

h1. When others want to use repository

h2. Get users public key

Whoever wants to work on the repo must create a public/private key pair and send you the public key.

[testuser@local]$ ssh-keygen -t rsa
[testuser@local]$ cp .ssh/id_rsa.pub ~

Send the administrator of the repository your @~/.ssh/id_rsa.pub@ file.

As the administrator add the file to the @keydir@ folder:

bc. 
[ftravers@local]$ cp /home/testuser/id_rsa.pub ~/projects/gitosis-admin/keydir/testuser.pub
[ftravers@local]$ cd ~/projects/gitosis-admin/keydir
[ftravers@local]$ git add .
[ftravers@local]$ cd ..

Now we have their public key we can add them to projects, edit the @~/projects/gitosis-admin/gitosis.conf@ file.

bc. 
[ftravers@local]$ cat ~/projects/gitosis-admin/gitosis.conf
[gitosis]
[group gitosis-admin]
writable = gitosis-admin
members = ftravers@ftravers-laptop
[group testgroup1]
writable = testrepo1
members = ftravers@ftravers-laptop testuser
[ftravers@local]$

Finally push up your changes to the conf file and the added public key to the server:

bc. 
[ftravers@local]$ git commit -a -m"My Message."
[ftravers@local]$ git push

h2. Clone Repository

Now the other user @testuser@ can checkout this repository

bc. 
[testuser@local]$ mkdir ~/projects; cd ~/projects
[testuser@local]$ git clone ft_git3@spicevan.com:testrepo1.git; cd ~/projects/testrepo1
# make some changes to the file @test.txt@ in the repo and commit and push them back to the server.
[testuser@local]$ git commit -a -m"My comment.";
[testuser@local]$ git push

h2. Pull Updates from Remote Repository

bc.
git pull origin master

h1. Test merging

In the above section a second user @testuser@ modified a file: @test.txt@ that the user @ftravers@ also has.  So as @ftravers@ we modify our copy of @test.txt@ and show below how to merge this with the different version that exists up on the server.

h2. Verify the updates

As the original @ftravers@ user, verify the updates the @testuser@ made.

bc. 
[ftravers@local]$ cd ~/projects/testrepo1/

Make some mods to @test.txt@ file.  This means what's on the server will conflict with what you have locally.  So try to pull down the changes that are on the server.

[ftravers@local]$ git pull origin master

Do any merging required if auto-merge fails and push up your changes.

bc. 
[ftravers@local]$ cd ~/projects/testrepo1/; git push

h2. Verify the changes as testuser

Now you can log back in as test user and pull down the changes.

bc. 
[testuser@local]$ cd ~/projects/testrepo1; git pull; cat test.txt

h1. Misc Tasks

h2. Unstaging a file

To unstage the file: @src/site/apt/build.apt~@

bc. git reset HEAD src/site/apt/build.apt~

h2. Git Ignore file

Create a file called @.gitignore@ in the project root and put lines like the following in it.

bc. 
# a comment - this is ignored
*.a       # no .a files
!lib.a    # but do track lib.a, even though you're ignoring .a files above
/TODO     # only ignore the root TODO file, not subdir/TODO
build/    # ignore all files in the build/ directory
doc/*.txt # ignore doc/notes.txt, but not doc/server/arch.txt
target/
*.diff
*~

h2. Compare Branches

Often you'll be working on a branch, then switch back to the master...and would like to 
know what is the difference between the two branches.

bc. git diff --name-status master..npe

h2. Compare Two Files

Then you might wonder what is the difference between a file that exists in two different
branches.

bc. git diff <branchA> <branchB> -- <file>

h2. Bring down remote changes

The following workflow has us list all of our branch (-a includes the remote branches)

bc. 
ftravers@ftravers-laptop:~/projects2/crmod-ws-wrapper$ git branch -a
  activity
* master
  remotes/origin/master
ftravers@ftravers-laptop:~/projects2/crmod-ws-wrapper$ git fetch origin

Check which files have changed, and what has changed in the files

bc. 
ftravers@ftravers-laptop:~/projects2/crmod-ws-wrapper$ git diff --name-status master..remotes/origin/master
M       src/main/java/com/oracle/ngsp/crmod/ServiceRequest.java
ftravers@ftravers-laptop:~/projects2/crmod-ws-wrapper$ git diff master..remotes/origin/master src/main/java/com/oracle/ngsp/crmod/ServiceRequest.java
...a lot of diff info...

Finally we can merge the branch into our master branch

bc. 
ftravers@ftravers-laptop:~/projects2/crmod-ws-wrapper$ git branch -a
  activity
* master
  remotes/origin/master
ftravers@ftravers-laptop:~/projects2/crmod-ws-wrapper$ git merge remotes/origin/master
Updating 2872496..3f88c4a
Fast-forward
 .../java/com/oracle/ngsp/crmod/ServiceRequest.java |   47 ++++++++++----------
 1 files changed, 24 insertions(+), 23 deletions(-)
ftravers@ftravers-laptop:~/projects2/crmod-ws-wrapper$ 

Finally, we might just want to make sure if anything got added that we push that back up
to the remote too.

bc. 
ftravers@ftravers-laptop:~/projects2/crmod-ws-wrapper$ git push
Everything up-to-date

h2. Manual Merge

Sometimes the auto-merge will report an inability to auto-merge for you:

bc. 
CONFLICT (content): Merge conflict in src/main/java/com/oracle/ngsp/crmod/Activity.java
Automatic merge failed; fix conflicts and then commit the result.

Now type:

bc. 
git mergetool

h2. Committing

Before you commit, you'll want to checkout what's going on.  The command
to see what has been modified, added, etc.. is:

bc. git status

To get a feel for which files have been changed and by how much try:

bc. git diff --stat

which gives you a sense of which files have been changed and by how much.  To
see what has changed in a given file do:

bc. 
git diff <filename>    # Command Format
git diff src/test/java/com/oracle/ngsp/crmod/ServiceRequestTest.java     # Command Example

Now you can add the file into the staging area with:

bc. git add src/test/java/com/oracle/ngsp/crmod/ServiceRequestTest.java

Then you can commit it with:

bc. 
git commit -m"<commit_Message>"   # Command Format
git commit -m"Removed testGetActivities from ServiceRequestTest"     # Command Example

h1(#gitOnWindows). Using Git on Windows

* Install cygwin adding the 'git' & 'openssh' packages when it comes time to select packages
* Send me your public key generated from "Setup SSH":/secure.html#keypair

Then you can do the rest of the commands for Git specified above.

h1(#gitRouting). Change your routing

Note: this tutorial is designed for linux and mac users.

If you are plugged on a company network where SSH is not tolerated but on the other hand have access to a wifi network where it is, 
there is a way to have GIT working without plugging/unplugging your network cable

* connect to the wifi network and make sure you can access internet
You can now figure out two informations from the traceroute command:

@bvanders-laptop:~ bvanders$ traceroute spicevan.com@
@traceroute to spicevan.com (173.236.138.100), 64 hops max, 40 byte packets@
@ 1  xxx.xxxx.xxx (192.168.0.1)  163.935 ms  167.994 ms  153.271 ms@

_192.168.0.1_ is your gateway
_173.236.138.100_ is spicevan.com's ip address

* connect your ethernet cable and type the following command to add a static route:
@sudo route add 173.236.138.100/32 192.168.0.1@

You should now be able to test it with the command @git status@

h1. Recipes

h2. Restore deleted file

Q: I deleted a file, committed that delete.  How do I find the commit where that file was deleted and how do I restore just that file?

A: Find the last commit that affected the given path. As the file isn't in the HEAD commit, this commit must have deleted it.

bc. git rev-list -n 1 HEAD -- <file_path>

Then checkout the version at the commit before.

bc. git checkout <deleting_commit>^ -- <file_path>
