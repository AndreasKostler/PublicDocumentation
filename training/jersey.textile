reference: "http://blogs.sun.com/japod/entry/building_simple_jersey_web_app":http://blogs.sun.com/japod/entry/building_simple_jersey_web_app

bc. 
mvn archetype:create -DgroupId=com.oracle.git.ngsp -DartifactId=crmodRestServer -DarchetypeArtifactId=maven-archetype-webapp


The java file:

bc. 
package com.example.my;
import javax.ws.rs.GET;
import javax.ws.rs.ProduceMime;
import javax.ws.rs.Path;
// The Java class will be hosted at the URI path "/greeting"
@Path("greeting")
public class SimpleResource {
    // and implement the following GET method 
    @GET @ProduceMime("text/plain")
    public String getGreeting() {
        return "Hi there";
    }
}

Maven POM updates:

bc. 
<dependency>
  <groupId>com.sun.jersey</groupId>
  <artifactId>jersey</artifactId>
  <version>0.8-ea-SNAPSHOT</version>
</dependency>
<repositories>
  <repository>
    <id>maven2-repository.dev.java.net</id>
    <name>Java.net Repository for Maven</name>
    <url>http://download.java.net/maven/2/</url>
    <layout>default</layout>
  </repository>
</repositories>

Here is some stuff so we can run it on tomcat:

bc. 
<build>
<plugins>
 <plugin>
  <groupId>org.codehaus.mojo</groupId>
  <artifactId>tomcat-maven-plugin</artifactId>
 </plugin>
 <plugin>
  <artifactId>maven-compiler-plugin</artifactId>
  <configuration>
   <source>1.6</source>
   <target>1.6</target>
  </configuration>
 </plugin>
</plugins>
...
</build>
The web.xml:

bc. 
<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >
<web-app>
  <display-name>Archetype Created Web Application</display-name>
  <servlet>
    <servlet-name>Jersey Web Application</servlet-name>
    <servlet-class>com.sun.jersey.spi.container.servlet.ServletContainer</servlet-class>
    <init-param>
      <param-name>com.sun.jersey.config.property.resourceConfigClass</param-name>
      <param-value>com.sun.jersey.api.core.PackagesResourceConfig</param-value>
    </init-param>
    <init-param>
      <param-name>com.sun.jersey.config.property.packages</param-name>
      <param-value>com.example.my</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>Jersey Web Application</servlet-name>
    <url-pattern>/*</url-pattern>
  </servlet-mapping>
</web-app>

run the application:

bc. mvn tomcat:run

testing it:

bc. 
curl -i http://localhost:8080/crmodRestServer/greeting 
HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Type: text/plain
Transfer-Encoding: chunked
Date: Mon, 02 Jun 2008 13:49:18 GMT
Hi there

h2. URL *PATH* Parameters

Update the java code to:

bc.
// The Java class will be hosted at the URI path "/greeting"
@Path("greeting/{name}")
public class CrmodRestServer {
	@GET
	@ProduceMime("text/plain")
	public String getGreeting(@PathParam("name") String name) {
		return "Hi there " + name;
	}

Test

bc. 
curl -i http://localhost:8080/crmodRestServer/greeting/Fenton
HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Type: text/plain
Transfer-Encoding: chunked
Date: Thu, 13 Jan 2011 07:01:00 GMT
Hi there Fenton


h2. URL *QUERY* Parameters 

code:

bc. 
@Path("greeting")
public class CrmodRestServer {
	@GET
	@ProduceMime("text/plain")
	public String getGreeting(@QueryParam("name") String name) {
		return "Hi there " + name;
	}

Test

bc. 
curl -i http://localhost:8080/crmodRestServer/greeting?name=Fenton
HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Type: text/plain
Transfer-Encoding: chunked
Date: Thu, 13 Jan 2011 07:07:39 GMT
Hi there Fenton

h3. Multiple Params

code:

bc. 
public String getGreeting(
       @QueryParam("name1") String name1, 
       @QueryParam("name2") String name2) { return "Hi " + name1 + " " + name2; }

test:

bc. curl -i "http://localhost:8080/crmodRestServer/greeting?name1=Fenton&name2=Travers"


h1. Using Netbeans

Since it is desireable to be able to debug the web services, it's
helpful if we can run the REST server inside the IDE.

bc. 
mvn -DarchetypeVersion=1.0.2 -Darchetype.interactive=false -DgroupId=com.oracle.git.ngsp -DarchetypeArtifactId=webapp-javaee6 -Dversion=1.0-SNAPSHOT -DarchetypeGroupId=org.codehaus.mojo.archetypes -Dbasedir=/home/oracle/projects -Dpackage=com.oracle.git.ngsp -DartifactId=crmodRestServer4 -Dnetbeans.execution=true --batch-mode org.apache.maven.plugins:maven-archetype-plugin:2.0-alpha-4:generate

* Right-click project > Set as Main Project

* Open project in Netbeans. Right click project > Properties > Run >
Select Glassfish.

* Create your rest web service class:

Right-click on project > New > Category: Web Services, File Types:
RESTful Web Services from Patterns > Simple Root Resource > put in
your desired values 

# I chose my path: Autosr
# Output: text/plain

> Radio button select: "Create default REST servlet
adaptor in web.xml" > OK

* Update the method annotated with @GET to have a one-liner:

bc. return "Hello World.";

* Launch the Server

Debug Main Project: Ctrl-F5
