"home":/index.html > Maven

p(toc). Table of Contents

{toc}

p(toc). Table of Contents

{toc}

h1. Download & Extract

* Goto: @http://www.codehaus.org@ or @http://www.apache.org/dyn/closer.cgi/maven/binaries/apache-maven-2.2.1-bin.zip@

* Click HTTP link to download file

 !images/maven_pics/02_maven.gif!

* To install maven there are a few steps.  Extract the software and put it in one of the following locations depending on your environment:

 * !images/windows.jpeg! Copy file to c:\bin and unzip it there
 
 * !images/mac.jpeg! Extract to a folder like: 
 
bc. 
~/bin/maven-2.2.1

( '~' or tilde is a shortcut for your home directory.  My home directory is: @/home/fentontravers@, yours will be @/home/[yourUserId]@)


h1. Set Environment Variables

h2. Windows

 !images/windows.jpeg! 
 
* Right-click My Computer. Go to Advance tab and click Environment Variables.

* Set JAVA_HOME variable. Example Click New. @Variable name: JAVA_HOME, Value:C:\Program Files\Java\jdk1.6.0_14@
 !images/maven_pics/03a_maven.gif!

* Edit Path variable by appending @C:\bin\apache-maven-2.2.1\bin@ at the end
 !images/maven_pics/04_maven.gif!

* Go to command prompt and type @mvn@ to ensure Maven can be used
 !images/maven_pics/06_maven.gif!
 
h2. Mac

!images/mac.jpeg!

* Edit the file: ~/bash_profile adding: 

h2. m2eclipse

m2eclipse Core Update Site: @http://m2eclipse.sonatype.org/sites/m2e@

is a good plugin for maven into eclipse, make sure to "set a jdk for the jvm":http://wiki.eclipse.org/Eclipse.ini#Specifying_the_JVM

h2(#eclipse_maven_repo_variable). Eclipse Setup
 
* You will tell eclipse _once_ where your maven repository is with the following command: (ensure that Eclipse is not running)

bc. mvn -Declipse.workspace=<eclipse workspacle>/ eclipse:add-maven-repo

example:  

bc. mvn -Declipse.workspace=/home/ft/workspaces/wksp1/ eclipse:add-maven-repo

OR
 
!images/maven_pics/07_maven.gif!
 
h1. Maven Commands

Compile your test files

bc. mvn test-compile

create your jar file

bc. mvn package

* create a website

bc. mvn site

* deploy to the web server

bc. mvn site-deploy

* deploy jar file to repo

bc. mvn jar-deploy

* doing a release with maven:

bc. 
mvn release:prepare
mvn release:prepare -DdryRun=true
mvn release:clean release:prepare
mvn release:perform

or all together

bc. 
mvn release:clean release:prepare release:perform

h2. Cargo

You can use cargo to deploy to your app server...like tomcat.

h2. Excluding unwanted transitive dependencies

When you start using maven you'll begin adding dependencies to your pom.  Recently I wanted to use Axis2 to call a web service.

bc. 
<plugin>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-dependency-plugin</artifactId>
</plugin>

run it:

bc. 
mvn clean install dependency:tree 

or (easier to tokenize in excel sheet)

bc. 
mvn clean install dependency:list   

h2. Distribution Management

bc. 
<project...>
	...
	<distributionManagement>
		<downloadUrl>http://files.spicevan.com/maven2/</downloadUrl>
		<site>
			<name>CRMOD SSO Login</name>
			<id>spicevan</id>
			<url>scp://spicevan.com/home/spiceman/files.spicevan.com/crmod-java-wrapper/</url>
		</site>
		<repository>
			<id>spicevan</id>
			<name>spicevan</name>
			<url>scp://spicevan.com/home/spiceman/files.spicevan.com/maven2/</url>
		</repository>
		<snapshotRepository>
			<id>spicevan</id>
			<name>spicevan</name>
			<url>scp://spicevan.com/home/spiceman/files.spicevan.com/maven2/</url>
		</snapshotRepository>
	</distributionManagement>
	<scm>
		<connection>scm:svn:http://svn.spicevan.com/svn/server-assist/</connection>
		<developerConnection>scm:svn:http://svn.spicevan.com/svn/server-assist/</developerConnection>
		<url>http://svn.spicevan.com/svn/server-assist/</url>
	</scm>
	<developers>
		<developer>
			<id>fenton</id>
			<name>Fenton Travers</name>
			<email>fenton.travers@gmail.com</email>
			<roles>
				<role>Architect</role>
			</roles>
			<organization>spicevan.com</organization>
			<timezone>+8</timezone>
		</developer>
	</developers>
	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.7</version>
				<configuration>
				</configuration>
			</plugin>
		</plugins>
	</reporting>
	<build>
		<finalName>server-assist</finalName>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<executions>
						<execution>
							<phase>package</phase>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<executions>
						<execution>
							<id>attach-javadocs</id>
							<!-- Restrict execution of source compilation to install -->
							<phase>install</phase>
							<goals>
								<goal>javadoc</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
bc. 
# cat ~/.m2/settings.xml
<?xml version="1.0" encoding="UTF-8"?>
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
  <servers>
    <server>
      <id>spicevan</id>
      <username>spiceman</username>
      <password>spicepass</password>
    </server>
  </servers>
  <activeProfiles>
    <activeProfile>stage</activeProfile>
  </activeProfiles>
  <profiles>
    <profile>
      <id>stage</id>
      <properties>
        <crmod.password>abc123</crmod.password>
        <crmod.username>ONGS-CRMOD-HRMS-STAGE_WW@oracle.com</crmod.username>
      </properties>
    </profile>
    <profile>
      <id>prod</id>
      <properties>
        <crmod.password>abc123</crmod.password>
        <crmod.username>ongs/Fenton.travers@oracle.com</crmod.username>
      </properties>
    </profile>
  </profiles>
</settings>
	
h2. Generate and Deploy javadocs

bc. mvn site

put this in the pom.xml:

bc. 
<project>
	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<executions>
						<execution>
							<id>attach-javadocs</id>
							<!-- Restrict execution of source compilation to install -->
							<phase>install</phase>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>

h2. Source code included in jar

bc. 
<project>
	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<executions>
						<execution>
						<phase>package</phase>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

bc. 
mvn source:jar
 
h2(#createProject). Create Project

* Go to your code development folder. Mine is located at @~/projects@

* Execute the following command replacing @com.mycompany.app@ with the
domain name and app name, then change the artifact id to something
like @app-web@.  This will create a folder called @app-web@ in your
code development folder.

h3. Generic

Simple Java project, suitable for JAR generation. Maven 2 default.

bc. mvn archetype:generate
-DarchetypeArtifactId=maven-archetype-quickstart
-DinteractiveMode=false -DgroupId=com.mycompany.app
-DartifactId=my-app

h3. Web

Creates a web application project (WAR), with a simple Hello World JSP.

bc. mvn archetype:generate
-DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false
-DgroupId=com.mycompany.app -DartifactId=my-app

h3. J2EE

Creates a J2EE project (EAR), with directories and subprojects for the
EJBs, servlets, etc.

bc. mvn archetype:generate
-DarchetypeArtifactId=maven-archetype-j2ee-simple
-DinteractiveMode=false -DgroupId=com.mycompany.app
-DartifactId=my-app


h2(#eclipsify). Eclips'ify

@cd@ into the @app-web@ folder and make your project suitable for
using with eclipse

bc. 
cd app-web
mvn eclipse:clean eclipse:eclipse 

!images/maven_pics/08_maven.gif!
!images/maven_pics/09_maven.gif!

h2. Import the project into Eclipse

File > Import > General > Existing Projects into Workspace

h2. Update your pom.xml

pom.xml file should be updated as in  "Reference":#reference

Do this after you make any changes to your @pom.xml@ file.

h2. Installing JAR to local Repo

Installing a zip/jar to your local repository

bc. mvn install:install-file -DgroupId=<your_group_name>  -DartifactId=<your_artifact_name>  -Dversion=<snapshot>  -Dfile=<path_to_your_jar_file> -Dpackaging=jar -DgeneratePom=true -DcreateChecksum=true

example:

bc. mvn install:install-file -DgroupId=com.oracle.stellent -DartifactId=ridc -Dversion=10.3 -Dfile=oracle-ridc-client-10g.jar -Dpackaging=jar -DgeneratePom=true -DcreateChecksum=true

h2. Installing to local repository

If you have a maven project you can install it directly into your repo with:

bc. 
mvn install -DcreateChecksum=true


h2. Create Public Repo

Setting up a public maven repository

Sometimes you have artifacts that you want to share with people but public repositories don't have that jar file.  These people may be on the other side of the world, so you need to create a publicly accessible place for them to get the jars.

* Create the jars in your local repo according to the steps in this document.  Make sure to create the checksums with that flag.
* rsync the parts of your local repo you want to go up there.  Below I'll use the example of a file called server.jar (this is the stellent server.zip file, just renamed to server.jar)

h3. Copy the jar into your local repo

bc. mvn install:install-file -DgroupId=com.oracle.stellent -DartifactId=server -Dversion=10.3 -Dfile=server-10.3.jar -Dpackaging=jar -DgeneratePom=true -DcreateChecksum=true

h3. rsync this to your public web server

bc. rsync -avP --stats ~/.m2/repository/com spiceman@spicevan.com:/home/spiceman/files.spicevan.com/maven2

h2. Accessing Your Public Repo

h3. include the references in the pom.xml file

bc. 
<dependencies>
  <dependency>
    <groupId>com.oracle.stellent</groupId>
    <artifactId>server</artifactId>
    <version>10.3</version>
  </dependency>      
</dependencies>
<repositories>
  <repository>
    <id>spicevan</id>
    <url>http://files.spicevan.com/maven2/</url>
  </repository>
</repositories>

That should be all that is required.

h2. Assemble all dependent jars into one package

bc. 
	<build>
		<finalName>server-assist</finalName>
		<pluginManagement>
			<plugins>
				<plugin>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>2.2-beta-5</version>
					<configuration>
						<descriptorRefs>
							<descriptorRef>jar-with-dependencies</descriptorRef>
						</descriptorRefs>
						<archive>
							<manifest>
							<mainClass>com.oracle.ngsp.controller.Controller</mainClass>
							</manifest>
						</archive>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

Run with:

@mvn assembly:assembly@ or @mvn -Ptest assembly:assembly -Dmaven.test.skip=true@ to avoid running the tests...the tests may depend on a setting that is only valid in the development environment and the @-Ptest@ flag will load up the test profile settings which can break the tests.  This way you shut off that step and can still build your uber jar. 

The above will also specify that the resultant jar execute the main method of: @com.oracle.ngsp.controller.Controller@ (an executable jar) with the following command:

bc. java -jar server-assist.jar 

h1(#reference). Reference

h2. <SCOPE>

The scope tag is used to decide where to put jars and when to use dependent jars.  Jars will always be used for compliling.  However sometimes you want to actually package the jars into 

* compile: packaged, default scope, available in all classpaths (compilation, testing, and during execution)
* runtime: packaged, required to run, but not compile
* test: not packaged, only during testing
* provided: not packaged, otherwise like compile

h2(#jvm_compile_version). Compilation Version 1.4, 1.5, 1.6

I need to compile some of my Maven projects to be JDK 1.4 compatible, some for JDK 1.5 or JDK 1.6. To do this in Maven is very straight forward since I have different pom.xml for different applications.

I write my code using JDK 1.5 syntax but I need the library to be JDK 1.4 compatible, so here is my configuration.

bc. 
<build>
	<finalName>Tailor</finalName>
	<pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.0.2</version>
				<configuration>
					<source>1.5</source>
					<target>1.5</target>
				</configuration>
			</plugin>
		</plugins>
	</pluginManagement>
</build>

you can use: @jsr14, 1.5, or 1.6@ as values for @source@ or @target@

h2. Fentons Personal Maven Repository

p(#personal_repo). The following is Fentons personal repository:

bc. 
<repositories>
  <repository>
    <id>spicevan</id>
    <url>http://files.spicevan.com/maven2/</url>
  </repository>
</repositories>

h2. Dependencies

h3. JPA - Java Persistence API

h4. Eclipselink

<dependencies>
  <dependency>
    <groupId>org.eclipse.persistence</groupId>
    <artifactId>eclipselink</artifactId>
    <version>2.0.0</version>
    <scope>compile</scope>
       ...
  </dependency>
<dependencies>
      ...
<repositories>
  <repository>
     <id>EclipseLink Repo</id>
     <url>http://www.eclipse.org/downloads/download.php?r=1&amp;nf=1&amp;file=/rt/eclipselink/maven.repo</url>
  </repository>    
      ...
</repositories> 


h3. Database

Here is a good page of dependency info: "http://docs.codehaus.org/display/TRAILS/DatabaseConfigurations":http://docs.codehaus.org/display/TRAILS/DatabaseConfigurations

h4. Derby

bc. 
<dependency>
	<groupId>org.apache.derby</groupId>
	<artifactId>derby</artifactId>
	<version>10.5.3.0_1</version>
	<type>jar</type>
	<scope>compile</scope>
</dependency>

h4. Oracle JDBC (java 1.6)

_Note_ - Requires adding: "Fentons Personal Maven Repository":#personal_repo.

The following versions are available: @db11gR2java16@, @db11gR2java15@, and @db10gR2java1415@.  Just substitute the version section below to get the correct version.

bc. 
<dependencies>
  <dependency>
    <groupId>com.oracle.database</groupId>
    <artifactId>ojdbc</artifactId>
    <version>db11gR2java16</version>
  </dependency>      
</dependencies>

h4. MySQL

bc. 
<dependency>
	<groupId>mysql</groupId>
	<artifactId>mysql-connector-java</artifactId>
	<version>5.1.9</version>
</dependency>

h4. MS SQL Server

bc. 
<dependency>
	<groupId>net.sourceforge.jtds</groupId>
	<artifactId>jtds</artifactId>
	<version>1.2</version>
</dependency>


h3. Content Server

h4. 10.3

_Note_ - Requires adding: "Fentons Personal Maven Repository":#personal_repo.

bc. 
<dependencies>
  <dependency>
    <groupId>com.oracle.stellent</groupId>
    <artifactId>server</artifactId>
    <version>10.3</version>
  </dependency>      
</dependencies>

h3. JUnit

bc. 
<dependency>
	<groupId>junit</groupId>
	<artifactId>junit</artifactId>
	<version>4.8.1</version>
</dependency>

h2. Sample pom.xml file

Take the components from the example below and add them into your @pom.xml@.  Here is an explanation of what is what.

* junit: testing
You will have an old version of junit in your pom, just get rid of the whole old junit.

* jsf-api, jsf-impl, standard, jstl: all required for JSF 2.0

* maven-eclipse-plugin: allows you to work with Eclipse Web Tools

* maven-compiler-plugin: does code compilation for you

bc. 
	<repositories>
		<repository>
			<id>maven2-repository.dev.java.net</id>
			<name>Java.net Repository for Maven</name>
			<url>http://download.java.net/maven/2</url>
		</repository>
	</repositories>
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.1</version>
		</dependency>
		<dependency>
			<groupId>com.sun.faces</groupId>
			<artifactId>jsf-api</artifactId>
			<version>2.0.2</version>
		</dependency>
		<dependency>
			<groupId>com.sun.faces</groupId>
			<artifactId>jsf-impl</artifactId>
			<version>2.0.2</version>
		</dependency>
		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
			<version>1.1.2</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.1.2</version>
		</dependency>
	</dependencies>
	<build>
		<finalName>Tailor</finalName>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>2.0.2</version>
					<configuration>
						<source>1.5</source>
						<target>1.5</target>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-eclipse-plugin</artifactId>
					<version>2.7</version>
					<configuration>
						<downloadSources>false</downloadSources>
						<wtpversion>2.0</wtpversion>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

h1(#profiles). Profiles

Profiles allow you to create a project/build that will work across environments such as development, test and production.  In the following example we use the case of database connection properties.  These are different for each environment and we handle this difference by putting the different values into the pom.xml.  Then in our persistence.xml we place the variable place holders that will get replaced once we build the project.

h2. Update pom.xml

In your pom.xml put:

bc. 
<project>
...
	<properties>
		<jdbc.driver>com.mysql.jdbc.Driver</jdbc.driver>
		<jdbc.url>jdbc:mysql://localhost:3306/stellent1</jdbc.url>
		<jdbc.username>stellent1user</jdbc.username>
		<jdbc.password>welcome1</jdbc.password>
	</properties>
	<profiles>
		<profile>
			<id>production</id>
			<properties>
				<jdbc.url>jdbc:jtds:sqlserver://picdev:1145/stellent10</jdbc.url>
				<jdbc.driver>net.sourceforge.jtds.jdbc.Driver</jdbc.driver>
				<jdbc.username>ftravers</jdbc.username>
				<jdbc.password>welcome1</jdbc.password>
			</properties>
		</profile>
	</profiles>
	<build>
		<finalName>myProject</finalName>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>2.3</version>
					<configuration>
						<encoding>UTF-8</encoding>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
	</build>
</project>

h2. persistence.xml 

p.(filelocation) src/main/resources/META-INF/persistence.xml

bc. 
<?xml version="1.0" encoding="UTF-8"?>
<persistence
...
version="1.0">
	<persistence-unit name="myProjectPersistenceUnit">
		<class>com.leveltree.stellent.serverassist.database.Revision</class>
		<class>com.leveltree.stellent.serverassist.database.DocMeta</class>
		<properties>
			<property name="javax.persistence.jdbc.driver" value="${jdbc.driver}" />
			<property name="javax.persistence.jdbc.url" value="${jdbc.url}" />
			<property name="javax.persistence.jdbc.user" value="${jdbc.username}" />
			<property name="javax.persistence.jdbc.password" value="${jdbc.password}" />
		</properties>
	</persistence-unit>
</persistence>

h2. Dissecting the pom.xml

Lets go through these one by one...  So basically we will build in development and in, say, production in this case.  We want the build to parse the persistence.xml file and replace the @${...}@ strings with the values specified in the profiles in pom.xml.  Now our normal maven commands is: @mvn package@ and we simply use: @mvn -Pproduction package@ and it will run this for production.  You can execute just @mvn package@ and it will take the values that are not in the profiles, but specified just in the top level @<properties>@ section, in my case these are my development settings.

The next thing to be aware of is that we have turned on filtering for the @src/main/resources@ directory as specified in the @resources@ section.  The @maven-resources-plugin@ plugin will look for this and do the actual filtering.  Be aware, all @${..}@ style strings will try to get processed in all sub-folders of @src/main/resoruces@!

h2. Apply the filtering

Finally, you'll want to merge the properties specifiec in the pom.xml into the persistence.xml file.  This is done with the command: 

bc. mvn process-resources

If you want to do this for the @production@ profile issue the command with a @-P@ flag like so:

bc. mvn -Pproduction process-resources

cat out the file to see your changes applied:

bc. cat target/classes/META-INF/persistence.xml 

h1. Junk to sort through

bc.. 
<descriptorRef>jar-with-dependencies</descriptorRef>

<plugin>
	<artifactId>maven-assembly-plugin</artifactId>
	<configuration>
		<descriptors>
			<descriptor>src/assemble/assembly.xml</descriptor>
		</descriptors>
		<descriptorRefs>
			<descriptorRef>jar-with-dependencies</descriptorRef>
		</descriptorRefs>
	</configuration>
</plugin>


<assembly
	xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0 http://maven.apache.org/xsd/assembly-1.1.0.xsd">
	<id>excludeJars</id>
	<dependencySets>
		<dependencySet>
			<includes>
				<include></include>
			</includes>
			<excludes>
				<exclude>log4j:log4j</exclude>
				<exclude>mysql:mysql-connector-java</exclude>
				<exclude>org.eclipse.persistence:eclipselink</exclude>
			</excludes>
		</dependencySet>
	</dependencySets>
</assembly>


<formats>
	<format>jar</format>
</formats>

<dependencySets>
	<dependencySet>
		<scope>runtime</scope>
	</dependencySet>
</dependencySets>

compile: packaged, default scope, available in all classpaths (compilation, testing, and during execution)
runtime: packaged, required to run, but not compile
test: not packaged, only during testing
provided: not packaged, otherwise like compile

runtime

don't unpack included jars:

<dependencySet>
  <unpack>false</unpack>
  <scope>runtime</scope>
</dependencySet>


<dependency>
	<groupId>javax.persistence</groupId>
	<artifactId>persistence-api</artifactId>
	<version>1.0b</version>
</dependency>


activate profiles in pom.xml

mvn -Pproduction install

pom.xml...
<profile> 
  <id>production</id> 

<?xml version="1.0" encoding="UTF-8"?>
<persistence	
	xmlns="http://java.sun.com/xml/ns/persistence"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"
	version="1.0">

	<persistence-unit name="serverAssistPersistUnit">
		<class>com.leveltree.stellent.serverassist.database.Revision</class>
		<class>com.leveltree.stellent.serverassist.database.DocMeta</class>

		<properties>
			<property name="javax.persistence.jdbc.driver" value="${jdbc.driver}" />
			<property name="javax.persistence.jdbc.url" value="${jdbc.url}" />
			<property name="javax.persistence.jdbc.user" value="${jdbc.username}" />
			<property name="javax.persistence.jdbc.password" value="${jdbc.password}" />
		</properties>
	</persistence-unit>
</persistence>
------------------------------------------------------------------------
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.leveltree</groupId>
	<artifactId>serverAssist</artifactId>
	<version>0.1</version>

	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring</artifactId>
			<version>2.5.5</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.9</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>net.sourceforge.jtds</groupId>
			<artifactId>jtds</artifactId>
			<version>1.2</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.persistence</groupId>
			<artifactId>eclipselink</artifactId>
			<version>2.0.0</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>javax.persistence</groupId>
			<artifactId>persistence-api</artifactId>
			<version>1.0</version>
		</dependency>
		<dependency>
			<groupId>javax.transaction</groupId>
			<artifactId>jta</artifactId>
			<version>1.1</version>
		</dependency>
	</dependencies>
	<repositories>
		<repository>
			<id>spicevan</id>
			<url>http://files.spicevan.com/maven2/</url>
		</repository>
		<repository>
			<id>EclipseLink Repo</id>
			<url>http://www.eclipse.org/downloads/download.php?r=1&amp;nf=1&amp;file=/rt/eclipselink/maven.repo</url>
		</repository>
		<repository>
			<id>jboss</id>
			<url>http://repository.jboss.org/maven2</url>
		</repository>
	</repositories>
	<build>
		<finalName>server-assist</finalName>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>2.0.2</version>
					<configuration>
						<source>1.5</source>
						<target>1.5</target>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-assembly-plugin</artifactId>
					<configuration>
						<descriptors>
							<descriptor>src/assemble/assembly.xml</descriptor>
						</descriptors>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.4.3</version>
					<configuration>
						<includes>
							<include>**/*Test*.java</include>
						</includes>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>persistence.xml</include>
				</includes>
				<filtering>true</filtering>
			</resource>
		</resources>
		<filters>
			<filter>src/main/filters/default.properties</filter>
		</filters>
	</build>
	<profiles>
		<profile>
			<id>production</id>
			<properties>
				<jdbc.url>jdbc:jtds:sqlserver://picdev:1145/stellent10</jdbc.url>
				<jdbc.driver>net.sourceforge.jtds.jdbc.Driver</jdbc.driver>
				<jdbc.username>ftravers</jdbc.username>
				<jdbc.password>welcome1</jdbc.password>
			</properties>
		</profile>
		<profile>
			<id>test</id>
			<properties>
				<jdbc.url>jdbc:jtds:sqlserver://picdev:1145/stellent10</jdbc.url>
				<jdbc.driver>net.sourceforge.jtds.jdbc.Driver</jdbc.driver>
				<jdbc.username>ftravers</jdbc.username>
				<jdbc.password>welcome1</jdbc.password>
			</properties>
		</profile>
	</profiles>
</project>

------------------------

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.oracle.ngsp</groupId>
	<artifactId>crmod-ws-wrapper</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.1</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>commons-httpclient</groupId>
			<artifactId>commons-httpclient</artifactId>
			<version>3.1</version>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.12</version>
		</dependency>
	</dependencies>

	<distributionManagement>
		<downloadUrl>http://files.spicevan.com/maven2/</downloadUrl>
		<site>
			<name>CRMOD SSO Login</name>
			<id>spicevan</id>
			<url>scp://spicevan.com/home/spiceman/files.spicevan.com/crmod-java-wrapper/</url>
		</site>
		<repository>
			<id>spicevan</id>
			<name>spicevan</name>
			<url>scp://spicevan.com/home/spiceman/files.spicevan.com/maven2/</url>
		</repository>
		<snapshotRepository>
			<id>spicevan</id>
			<name>spicevan</name>
			<url>scp://spicevan.com/home/spiceman/files.spicevan.com/maven2/</url>
		</snapshotRepository>
	</distributionManagement>
	<developers>
		<developer>
			<id>fenton</id>
			<name>Fenton Travers</name>
			<email>fenton.travers@gmail.com</email>
			<roles>
				<role>Architect</role>
			</roles>
			<organization>ngsp.git.oracle.com</organization>
			<timezone>+8</timezone>
		</developer>
	</developers>
	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.7</version>
				<configuration>
				</configuration>
			</plugin>
		</plugins>
	</reporting>
	<repositories>
		<repository>
			<id>spicevan</id>
			<url>http://files.spicevan.com/maven2/</url>
		</repository>
	</repositories>

	<properties>
		<crmod.ssoPassword>password</crmod.ssoPassword>
		<crmod.ssoUsername>fenton.travers@oracle.com</crmod.ssoUsername>
		<crmod.companyId>ONGS</crmod.companyId>
		<crmod.serverName>https://secure-ausomxfca.crmondemand.com/</crmod.serverName>
	</properties>
	<profiles>
		<profile>
			<id>prod</id>
			<properties>
				<crmod.serverName>https://secure-ausomxfba.crmondemand.com/</crmod.serverName>
			</properties>
		</profile>
	</profiles>
	<build>
		<finalName>crmod-ws-wrapper</finalName>
		<pluginManagement>
			<plugins>
				<plugin>
					<artifactId>maven-resources-plugin</artifactId>
					<version>2.3</version>
					<configuration>
						<encoding>UTF-8</encoding>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>2.2-beta-5</version>
					<configuration>
						<descriptorRefs>
							<descriptorRef>jar-with-dependencies</descriptorRef>
						</descriptorRefs>
						<archive>
							<manifest>
								<mainClass>com.oracle.ngsp.controller.Controller</mainClass>
							</manifest>
						</archive>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<executions>
						<execution>
							<phase>package</phase>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<executions>
						<execution>
							<id>attach-javadocs</id>
							<!-- Restrict execution of source compilation to install -->
							<phase>install</phase>
							<goals>
								<goal>javadoc</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>2.0.2</version>
					<configuration>
						<source>1.5</source>
						<target>1.5</target>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
	</build>
</project>
